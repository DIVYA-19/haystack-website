{"componentChunkName":"component---src-templates-doc-template-js","path":"/haystack-io/en/docs/file_convertersmd","result":{"data":{"markdownRemark":{"frontmatter":{"id":"file_convertersmd","title":"File Converters"}},"allFile":{"edges":[{"node":{"relativeDirectory":"layout","childLayoutJson":{"layout":{"header":{"quick":"Quick Start","benchmarks":"Benchmarks","why":"Why Haystack","gui":"Admin","tutorials":"Tutorials","solution":"Scenarios","about":"About Haystack","doc":"Docs","blog":"Blog","try":"Try","loading":"Loading...","noresult":"No Result","tutorial":"Tutorial","search":"Search","bootcamp":"Bootcamp"}}}}}]}},"pageContext":{"locale":"en","old":"file_convertersmd","headings":[{"value":"File Converters","depth":1},{"value":"Base","depth":2},{"value":"class haystack.indexing.fileconverters.base.BaseConverter(removenumerictables: Optionalbool = None, removeheaderfooter: Optionalbool = None, removewhitespace: Optionalbool = None, removeemptylines: Optionalbool = None, valid_languages: Optional[Liststr] = None)","depth":3},{"value":"Docx","depth":2},{"value":"class haystack.indexing.fileconverters.docx.DocxToTextConverter(removenumerictables: Optionalbool = None, removeheaderfooter: Optionalbool = None, removewhitespace: Optionalbool = None, removeemptylines: Optionalbool = None, valid_languages: Optional[Liststr] = None)","depth":3},{"value":"PDF","depth":2},{"value":"class haystack.indexing.fileconverters.pdf.PDFToTextConverter(removenumerictables: Optionalbool = False, removewhitespace: Optionalbool = None, removeemptylines: Optionalbool = None, removeheaderfooter: Optionalbool = None, valid_languages: Optional[Liststr] = None)","depth":3},{"value":"Txt","depth":2},{"value":"class haystack.indexing.fileconverters.txt.TextConverter(removenumerictables: Optionalbool = False, removewhitespace: Optionalbool = None, removeemptylines: Optionalbool = None, removeheaderfooter: Optionalbool = None, valid_languages: Optional[Liststr] = None)","depth":3},{"value":"Tika","depth":2}],"fileAbsolutePath":"/home/markus/Documents/git/haystack-io/src/pages/docs/site/en/api/api/file_converters.md","editPath":"api/api/file_converters.rst","allMenus":[{"lang":"en","menuList":[{"id":"usage_haystack","title":"Usage","label1":"","label2":"","label3":"","order":0,"isMenu":true},{"id":"intromd","title":"What is Haystack","label1":"usage_haystack","label2":"","label3":"","order":0,"isMenu":null},{"id":"get_startedmd","title":"Get Started","label1":"usage_haystack","label2":"","label3":"","order":1,"isMenu":null},{"id":"databasemd","title":"Document Store","label1":"usage_haystack","label2":"","label3":"","order":2,"isMenu":null},{"id":"retrievermd","title":"Retriever","label1":"usage_haystack","label2":"","label3":"","order":3,"isMenu":null},{"id":"readermd","title":"Reader","label1":"usage_haystack","label2":"","label3":"","order":4,"isMenu":null},{"id":"domain_adaptionmd","title":"Domain Adaption","label1":"usage_haystack","label2":"","label3":"","order":5,"isMenu":null},{"id":"termsmd","title":"Glossary","label1":"usage_haystack","label2":"","label3":"","order":6,"isMenu":null},{"id":"tutorials_haystack","title":"Tutorials","label1":"","label2":"","label3":"","order":1,"isMenu":true},{"id":"tutorial1md","title":"Task: Question Answering for Game of Thrones","label1":"tutorials_haystack","label2":"","label3":"","order":0,"isMenu":null},{"id":"tutorial2md","title":"Fine-tuning a model on your own data","label1":"tutorials_haystack","label2":"","label3":"","order":1,"isMenu":null},{"id":"tutorial3md","title":"Task: Build a Question Answering pipeline without Elasticsearch","label1":"tutorials_haystack","label2":"","label3":"","order":2,"isMenu":null},{"id":"tutorial4md","title":"FAQ-Style QA: Utilizing existing FAQs for Question Answering","label1":"tutorials_haystack","label2":"","label3":"","order":3,"isMenu":null},{"id":"tutorial5md","title":"Evaluation","label1":"tutorials_haystack","label2":"","label3":"","order":4,"isMenu":null},{"id":"tutorial6md","title":"Better retrieval via Dense Passage Retrieval","label1":"tutorials_haystack","label2":"","label3":"","order":5,"isMenu":null},{"id":"api_haystack","title":"API","label1":"","label2":"","label3":"","order":2,"isMenu":true},{"id":"apidatabasemd","title":"Database","label1":"api_haystack","label2":"","label3":"","order":0,"isMenu":null},{"id":"apiretrievermd","title":"Retriever","label1":"api_haystack","label2":"","label3":"","order":1,"isMenu":null},{"id":"apireadermd","title":"Reader","label1":"api_haystack","label2":"api_haystack","label3":"","order":2,"isMenu":null},{"id":"apiindexingmd","title":"Indexing","label1":"api_haystack","label2":"","label3":"","order":3,"isMenu":null},{"id":"rest_apimd","title":"Rest API","label1":"api_haystack","label2":"","label3":"","order":4,"isMenu":null},{"id":"file_convertersmd","title":"File Converters","label1":"api_haystack","label2":"","label3":"","order":5,"isMenu":null}],"absolutePath":"/home/markus/Documents/git/haystack-io/src/pages/docs/site/en/menuStructure/menu.json"}],"newHtml":"<h1>File Converters</h1>\n<h2>Base</h2>\n<h3>class haystack.indexing.file<em>converters.base.BaseConverter(remove</em>numeric<em>tables: Optional[bool] = None, remove</em>header<em>footer: Optional[bool] = None, remove</em>whitespace: Optional[bool] = None, remove<em>empty</em>lines: Optional[bool] = None, valid_languages: Optional[List[str]] = None)</h3>\n<p>Bases: <code>object</code></p>\n<p>Base class for implementing file converts to transform input documents to text format for indexing in database.</p>\n<h4>_<em>init__(remove</em>numeric<em>tables: Optional[bool] = None, remove</em>header<em>footer: Optional[bool] = None, remove</em>whitespace: Optional[bool] = None, remove<em>empty</em>lines: Optional[bool] = None, valid_languages: Optional[List[str]] = None)</h4>\n<ul>\n<li>\n<p><strong>Parameters</strong></p>\n<ul>\n<li><strong>remove<em>numeric</em>tables</strong> – This option uses heuristics to remove numeric rows from the tables.\nThe tabular structures in documents might be noise for the reader model if it\ndoes not have table parsing capability for finding answers. However, tables\nmay also have long strings that could possible candidate for searching answers.\nThe rows containing strings are thus retained in this option.</li>\n<li><strong>remove<em>header</em>footer</strong> – use heuristic to remove footers and headers across different pages by searching\nfor the longest common string. This heuristic uses exact matches and therefore\nworks well for footers like “Copyright 2019 by XXX”, but won’t detect “Page 3 of 4”\nor similar.</li>\n<li><strong>remove_whitespace</strong> – strip whitespaces before or after each line in the text.</li>\n<li><strong>remove<em>empty</em>lines</strong> – remove more than two empty lines in the text.</li>\n<li><strong>valid_languages</strong> – validate languages from a list of languages specified in the ISO 639-1\n(<a href=\"https://en.wikipedia.org/wiki/ISO_639-1\">https://en.wikipedia.org/wiki/ISO_639-1</a>) format.\nThis option can be used to add test for encoding errors. If the extracted text is\nnot one of the valid languages, then it might likely be encoding error resulting\nin garbled text.</li>\n</ul>\n</li>\n</ul>\n<h4>abstract extract<em>pages(file</em>path: pathlib.Path)</h4>\n<h4>find<em>and</em>remove<em>header</em>footer(pages: List[str], n<em>chars: int, n</em>first<em>pages</em>to<em>ignore: int, n</em>last<em>pages</em>to_ignore: int)</h4>\n<p>Heuristic to find footers and headers across different pages by searching for the longest common string.\nFor headers we only search in the first n<em>chars characters (for footer: last n</em>chars).\nNote: This heuristic uses exact matches and therefore works well for footers like “Copyright 2019 by XXX”,</p>\n<blockquote>\n<p>but won’t detect “Page 3 of 4” or similar.</p>\n</blockquote>\n<ul>\n<li>\n<p><strong>Parameters</strong></p>\n<ul>\n<li><strong>pages</strong> – list of strings, one string per page</li>\n<li><strong>n_chars</strong> – number of first/last characters where the header/footer shall be searched in</li>\n<li><strong>n<em>first</em>pages<em>to</em>ignore</strong> – number of first pages to ignore (e.g. TOCs often don’t contain footer/header)</li>\n<li><strong>n<em>last</em>pages<em>to</em>ignore</strong> – number of last pages to ignore</li>\n</ul>\n</li>\n<li>\n<p><strong>Returns</strong></p>\n<p>(cleaned pages, found<em>header</em>str, found<em>footer</em>str)</p>\n</li>\n</ul>\n<h4>validate_language(text: str)</h4>\n<p>Validate if the language of the text is one of valid languages.</p>\n<h2>Docx</h2>\n<h3>class haystack.indexing.file<em>converters.docx.DocxToTextConverter(remove</em>numeric<em>tables: Optional[bool] = None, remove</em>header<em>footer: Optional[bool] = None, remove</em>whitespace: Optional[bool] = None, remove<em>empty</em>lines: Optional[bool] = None, valid_languages: Optional[List[str]] = None)</h3>\n<p>Bases: <code>haystack.indexing.file_converters.base.BaseConverter</code></p>\n<h4>extract<em>pages(file</em>path: pathlib.Path)</h4>\n<p>Extract text from a .docx file.\nNote: As docx doesn’t contain “page” information, we actually extract and return a list of paragraphs here.\nFor compliance with other converters we nevertheless opted for keeping the methods name.</p>\n<ul>\n<li>\n<p><strong>Parameters</strong></p>\n<p><strong>file_path</strong> – Path to the .docx file you want to convert</p>\n</li>\n</ul>\n<h2>PDF</h2>\n<h3>class haystack.indexing.file<em>converters.pdf.PDFToTextConverter(remove</em>numeric<em>tables: Optional[bool] = False, remove</em>whitespace: Optional[bool] = None, remove<em>empty</em>lines: Optional[bool] = None, remove<em>header</em>footer: Optional[bool] = None, valid_languages: Optional[List[str]] = None)</h3>\n<p>Bases: <code>haystack.indexing.file_converters.base.BaseConverter</code></p>\n<h4>_<em>init__(remove</em>numeric<em>tables: Optional[bool] = False, remove</em>whitespace: Optional[bool] = None, remove<em>empty</em>lines: Optional[bool] = None, remove<em>header</em>footer: Optional[bool] = None, valid_languages: Optional[List[str]] = None)</h4>\n<ul>\n<li>\n<p><strong>Parameters</strong></p>\n<ul>\n<li><strong>remove<em>numeric</em>tables</strong> – This option uses heuristics to remove numeric rows from the tables.\nThe tabular structures in documents might be noise for the reader model if it\ndoes not have table parsing capability for finding answers. However, tables\nmay also have long strings that could possible candidate for searching answers.\nThe rows containing strings are thus retained in this option.</li>\n<li><strong>remove_whitespace</strong> – strip whitespaces before or after each line in the text.</li>\n<li><strong>remove<em>empty</em>lines</strong> – remove more than two empty lines in the text.</li>\n<li><strong>remove<em>header</em>footer</strong> – use heuristic to remove footers and headers across different pages by searching\nfor the longest common string. This heuristic uses exact matches and therefore\nworks well for footers like “Copyright 2019 by XXX”, but won’t detect “Page 3 of 4”\nor similar.</li>\n<li><strong>valid_languages</strong> – validate languages from a list of languages specified in the ISO 639-1\n(<a href=\"https://en.wikipedia.org/wiki/ISO_639-1\">https://en.wikipedia.org/wiki/ISO_639-1</a>) format.\nThis option can be used to add test for encoding errors. If the extracted text is\nnot one of the valid languages, then it might likely be encoding error resulting\nin garbled text.</li>\n</ul>\n</li>\n</ul>\n<h4>extract<em>pages(file</em>path: pathlib.Path)</h4>\n<h2>Txt</h2>\n<h3>class haystack.indexing.file<em>converters.txt.TextConverter(remove</em>numeric<em>tables: Optional[bool] = False, remove</em>whitespace: Optional[bool] = None, remove<em>empty</em>lines: Optional[bool] = None, remove<em>header</em>footer: Optional[bool] = None, valid_languages: Optional[List[str]] = None)</h3>\n<p>Bases: <code>haystack.indexing.file_converters.base.BaseConverter</code></p>\n<h4>_<em>init__(remove</em>numeric<em>tables: Optional[bool] = False, remove</em>whitespace: Optional[bool] = None, remove<em>empty</em>lines: Optional[bool] = None, remove<em>header</em>footer: Optional[bool] = None, valid_languages: Optional[List[str]] = None)</h4>\n<ul>\n<li>\n<p><strong>Parameters</strong></p>\n<ul>\n<li><strong>remove<em>numeric</em>tables</strong> – This option uses heuristics to remove numeric rows from the tables.\nThe tabular structures in documents might be noise for the reader model if it\ndoes not have table parsing capability for finding answers. However, tables\nmay also have long strings that could possible candidate for searching answers.\nThe rows containing strings are thus retained in this option.</li>\n<li><strong>remove_whitespace</strong> – strip whitespaces before or after each line in the text.</li>\n<li><strong>remove<em>empty</em>lines</strong> – remove more than two empty lines in the text.</li>\n<li><strong>remove<em>header</em>footer</strong> – use heuristic to remove footers and headers across different pages by searching\nfor the longest common string. This heuristic uses exact matches and therefore\nworks well for footers like “Copyright 2019 by XXX”, but won’t detect “Page 3 of 4”\nor similar.</li>\n<li><strong>valid_languages</strong> – validate languages from a list of languages specified in the ISO 639-1\n(<a href=\"https://en.wikipedia.org/wiki/ISO_639-1\">https://en.wikipedia.org/wiki/ISO_639-1</a>) format.\nThis option can be used to add test for encoding errors. If the extracted text is\nnot one of the valid languages, then it might likely be encoding error resulting\nin garbled text.</li>\n</ul>\n</li>\n</ul>\n<h4>extract<em>pages(file</em>path: pathlib.Path)</h4>\n<h2>Tika</h2>"}},"staticQueryHashes":[]}