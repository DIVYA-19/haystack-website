{"componentChunkName":"component---src-templates-doc-template-js","path":"/en/docs/get_startedmd","result":{"data":{"markdownRemark":{"frontmatter":{"id":"get_startedmd","title":"Get Started"}},"allFile":{"edges":[{"node":{"relativeDirectory":"layout","childLayoutJson":{"layout":{"header":{"quick":"Quick Start","benchmarks":"Benchmarks","why":"Why Haystack","gui":"Admin","tutorials":"Tutorials","solution":"Scenarios","about":"About Haystack","doc":"Docs","blog":"Blog","try":"Try","loading":"Loading...","noresult":"No Result","tutorial":"Tutorial","search":"Search","bootcamp":"Bootcamp"}}}}}]}},"pageContext":{"locale":"en","old":"get_startedmd","headings":[{"value":"Get Started","depth":1},{"value":"Installation","depth":2},{"value":"The Building Blocks of Haystack","depth":2},{"value":"Loading Documents into the DocumentStore","depth":2},{"value":"Running Queries","depth":2}],"fileAbsolutePath":"/home/markus/Documents/git/haystack-io/src/pages/docs/site/en/usage/usage/get_started.md","editPath":"usage/usage/get_started.rst","allMenus":[{"lang":"en","menuList":[{"id":"usage_haystack","title":"Usage","label1":"","label2":"","label3":"","order":0,"isMenu":true},{"id":"intromd","title":"What is Haystack","label1":"usage_haystack","label2":"","label3":"","order":0,"isMenu":null},{"id":"get_startedmd","title":"Get Started","label1":"usage_haystack","label2":"","label3":"","order":1,"isMenu":null},{"id":"databasemd","title":"Document Store","label1":"usage_haystack","label2":"","label3":"","order":2,"isMenu":null},{"id":"retrievermd","title":"Retriever","label1":"usage_haystack","label2":"","label3":"","order":3,"isMenu":null},{"id":"readermd","title":"Reader","label1":"usage_haystack","label2":"","label3":"","order":4,"isMenu":null},{"id":"domain_adaptionmd","title":"Domain Adaption","label1":"usage_haystack","label2":"","label3":"","order":5,"isMenu":null},{"id":"termsmd","title":"Glossary","label1":"usage_haystack","label2":"","label3":"","order":6,"isMenu":null},{"id":"tutorials_haystack","title":"Tutorials","label1":"","label2":"","label3":"","order":1,"isMenu":true},{"id":"tutorial1md","title":"Task: Question Answering for Game of Thrones","label1":"tutorials_haystack","label2":"","label3":"","order":0,"isMenu":null},{"id":"tutorial2md","title":"Fine-tuning a model on your own data","label1":"tutorials_haystack","label2":"","label3":"","order":1,"isMenu":null},{"id":"tutorial3md","title":"Task: Build a Question Answering pipeline without Elasticsearch","label1":"tutorials_haystack","label2":"","label3":"","order":2,"isMenu":null},{"id":"tutorial4md","title":"FAQ-Style QA: Utilizing existing FAQs for Question Answering","label1":"tutorials_haystack","label2":"","label3":"","order":3,"isMenu":null},{"id":"tutorial5md","title":"Evaluation","label1":"tutorials_haystack","label2":"","label3":"","order":4,"isMenu":null},{"id":"tutorial6md","title":"Better retrieval via Dense Passage Retrieval","label1":"tutorials_haystack","label2":"","label3":"","order":5,"isMenu":null},{"id":"api_haystack","title":"API","label1":"","label2":"","label3":"","order":2,"isMenu":true},{"id":"apidatabasemd","title":"Database","label1":"api_haystack","label2":"","label3":"","order":0,"isMenu":null},{"id":"apiretrievermd","title":"Retriever","label1":"api_haystack","label2":"","label3":"","order":1,"isMenu":null},{"id":"apireadermd","title":"Reader","label1":"api_haystack","label2":"api_haystack","label3":"","order":2,"isMenu":null},{"id":"apiindexingmd","title":"Indexing","label1":"api_haystack","label2":"","label3":"","order":3,"isMenu":null},{"id":"rest_apimd","title":"Rest API","label1":"api_haystack","label2":"","label3":"","order":4,"isMenu":null},{"id":"file_convertersmd","title":"File Converters","label1":"api_haystack","label2":"","label3":"","order":5,"isMenu":null}],"absolutePath":"/home/markus/Documents/git/haystack-io/src/pages/docs/site/en/menuStructure/menu.json"}],"newHtml":"<h1>Get Started</h1>\n<h2>Installation</h2>\n<p>Basic</p>\n<p>The most straightforward way to install Haystack is through pip.</p>\n<pre><code>$ pip install farm-haystack\n</code></pre>\n<p>Editable</p>\n<p>If you’d like to run a specific, unreleased version of Haystack, or make edits to the way Haystack runs,\nyou’ll want to install it using <code>git</code> and <code>pip --editable</code>.\nThis clones a copy of the repo to a local directory and runs Haystack from there.</p>\n<pre><code>$ git clone https://github.com/deepset-ai/haystack.git\n$ cd haystack\n$ pip install --editable .\n</code></pre>\n<p>By default, this will give you the latest version of the master branch.\nUse regular git commands to switch between different branches and commits.</p>\n<!-- _comment: !! Have a tab for docker!! -->\n<!-- -comment: !! Have a hello world example!! -->\n<h2>The Building Blocks of Haystack</h2>\n<p>Here’s a sample of some Haystack code showing the most important components.\nFor a working code example, check out our starter tutorial.</p>\n<!-- _comment: !!link!! -->\n<pre><code># DocumentStore: holds all your data\ndocument_store = ElasticsearchDocumentStore()\n\n# Clean &#x26; load your documents into the DocumentStore\ndicts = convert_files_to_dicts(doc_dir, clean_func=clean_wiki_text)\ndocument_store.write_documents(dicts)\n\n# Retriever: A Fast and simple algo to indentify the most promising candidate documents\nretriever = ElasticsearchRetriever(document_store)\n\n# Reader: Powerful but slower neural network trained for QA\nmodel_name = \"deepset/roberta-base-squad2\"\nreader = FARMReader(model_name)\n\n# Finder: Combines Reader and Retriever\nfinder = Finder(reader, retriever)\n\n# Voilà! Ask a question!\nquestion = \"Who is the father of Sansa Stark?\"\nprediction = finder.get_answers(question)\nprint_answers(prediction)\n</code></pre>\n<h2>Loading Documents into the DocumentStore</h2>\n<p>In Haystack, DocumentStores expect Documents in a dictionary format. They are loaded as follows:</p>\n<pre><code>document_store = ElasticsearchDocumentStore()\ndicts = [\n    {\n        'text': DOCUMENT_TEXT_HERE,\n        'meta': {'name': DOCUMENT_NAME, ...}\n    }, ...\n]\ndocument_store.write_documents(dicts)\n</code></pre>\n<p>When we talk about Documents in Haystack, we are referring specifically to the individual blocks of text that are being held in the DocumentStore.\nYou might want to use all the text in one file as a Document, or split it into multiple Documents.\nThis splitting can have a big impact on speed and performance.</p>\n<p><strong>General Guide</strong>: If Haystack is running very slowly, you might want to try splitting your text into smaller Documents.\nIf you want an improvement to performance, you might want to try concatenating text to make larger Documents.</p>\n<h2>Running Queries</h2>\n<p><strong>Querying</strong> involves searching for an answer to a given question within the full document store.\nThis process will:</p>\n<ul>\n<li>make the Retriever filter for a small set of relevant candidate documents</li>\n<li>get the Reader to process this set of candidate documents</li>\n<li>return potential answers to the given question</li>\n</ul>\n<p>Usually, there are tight time constraints on querying and so it needs to be a lightweight operation.\nWhen documents are loaded, Haystack will precompute any of the results that might be useful at query time.</p>\n<p>In Haystack, querying is performed with a <code>Finder</code> object which connects the reader to the retriever.</p>\n<pre><code># The Finder sticks together reader and retriever in a pipeline to answer our questions.\nfinder = Finder(reader, retriever)\n\n# Voilà! Ask a question!\nquestion = \"Who is the father of Sansa Stark?\"\nprediction = finder.get_answers(question)\n</code></pre>\n<p>When the query is complete, you can expect to see results that look something like this:</p>\n<pre><code>[\n    {   'answer': 'Eddard',\n        'context': 's Nymeria after a legendary warrior queen. She travels '\n                   \"with her father, Eddard, to King's Landing when he is made \"\n                   'Hand of the King. Before she leaves,'\n    }, ...\n]\n</code></pre>"}},"staticQueryHashes":[]}