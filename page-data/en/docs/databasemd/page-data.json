{"componentChunkName":"component---src-templates-doc-template-js","path":"/en/docs/databasemd","result":{"data":{"markdownRemark":{"frontmatter":{"id":"databasemd","title":"Database"}},"allFile":{"edges":[{"node":{"relativeDirectory":"layout","childLayoutJson":{"layout":{"header":{"quick":"Quick Start","benchmarks":"Benchmarks","why":"Why Haystack","gui":"Admin","tutorials":"Tutorials","solution":"Scenarios","about":"About Haystack","doc":"Docs","blog":"Blog","try":"Try","loading":"Loading...","noresult":"No Result","tutorial":"Tutorial","search":"Search","bootcamp":"Bootcamp"}}}}}]}},"pageContext":{"locale":"en","old":"databasemd","headings":[{"value":"Document Stores","depth":1},{"value":"Initialisation","depth":2},{"value":"Preparing Documents","depth":2},{"value":"File Conversion","depth":2},{"value":"Writing Documents","depth":2},{"value":"For Sparse Retrievers","depth":3},{"value":"For Dense Retrievers","depth":3},{"value":"Choosing the right database","depth":2}],"fileAbsolutePath":"/home/markus/Documents/git/haystack-io/src/pages/docs/site/en/usage/usage/database.md","editPath":"usage/usage/database.rst","allMenus":[{"lang":"en","menuList":[{"id":"usage_haystack","title":"Usage","label1":"","label2":"","label3":"","order":0,"isMenu":true},{"id":"intromd","title":"What is Haystack","label1":"usage_haystack","label2":"","label3":"","order":0,"isMenu":null},{"id":"get_startedmd","title":"Get Started","label1":"usage_haystack","label2":"","label3":"","order":1,"isMenu":null},{"id":"databasemd","title":"Document Store","label1":"usage_haystack","label2":"","label3":"","order":2,"isMenu":null},{"id":"retrievermd","title":"Retriever","label1":"usage_haystack","label2":"","label3":"","order":3,"isMenu":null},{"id":"readermd","title":"Reader","label1":"usage_haystack","label2":"","label3":"","order":4,"isMenu":null},{"id":"domain_adaptionmd","title":"Domain Adaption","label1":"usage_haystack","label2":"","label3":"","order":5,"isMenu":null},{"id":"termsmd","title":"Glossary","label1":"usage_haystack","label2":"","label3":"","order":6,"isMenu":null},{"id":"tutorials_haystack","title":"Tutorials","label1":"","label2":"","label3":"","order":1,"isMenu":true},{"id":"tutorial1md","title":"Task: Question Answering for Game of Thrones","label1":"tutorials_haystack","label2":"","label3":"","order":0,"isMenu":null},{"id":"tutorial2md","title":"Fine-tuning a model on your own data","label1":"tutorials_haystack","label2":"","label3":"","order":1,"isMenu":null},{"id":"tutorial3md","title":"Task: Build a Question Answering pipeline without Elasticsearch","label1":"tutorials_haystack","label2":"","label3":"","order":2,"isMenu":null},{"id":"tutorial4md","title":"FAQ-Style QA: Utilizing existing FAQs for Question Answering","label1":"tutorials_haystack","label2":"","label3":"","order":3,"isMenu":null},{"id":"tutorial5md","title":"Evaluation","label1":"tutorials_haystack","label2":"","label3":"","order":4,"isMenu":null},{"id":"tutorial6md","title":"Better retrieval via Dense Passage Retrieval","label1":"tutorials_haystack","label2":"","label3":"","order":5,"isMenu":null},{"id":"api_haystack","title":"API","label1":"","label2":"","label3":"","order":2,"isMenu":true},{"id":"apidatabasemd","title":"Database","label1":"api_haystack","label2":"","label3":"","order":0,"isMenu":null},{"id":"apiretrievermd","title":"Retriever","label1":"api_haystack","label2":"","label3":"","order":1,"isMenu":null},{"id":"apireadermd","title":"Reader","label1":"api_haystack","label2":"api_haystack","label3":"","order":2,"isMenu":null},{"id":"apiindexingmd","title":"Indexing","label1":"api_haystack","label2":"","label3":"","order":3,"isMenu":null},{"id":"rest_apimd","title":"Rest API","label1":"api_haystack","label2":"","label3":"","order":4,"isMenu":null},{"id":"file_convertersmd","title":"File Converters","label1":"api_haystack","label2":"","label3":"","order":5,"isMenu":null}],"absolutePath":"/home/markus/Documents/git/haystack-io/src/pages/docs/site/en/menuStructure/menu.json"}],"newHtml":"<h1>Document Stores</h1>\n<h2>Initialisation</h2>\n<p>Initialising a new Document Store is straight forward.</p>\n<p>Elasticsearch</p>\n<pre><code>document_store = ElasticsearchDocumentStore()\n</code></pre>\n<p>FAISS</p>\n<pre><code>document_store = FAISSDocumentStore()\n</code></pre>\n<p>SQL</p>\n<pre><code>document_store = SQLDocumentStore()\n</code></pre>\n<p>In Memory</p>\n<pre><code>document_store = InMemoryDocumentStore()\n</code></pre>\n<p>Each DocumentStore constructor allows for arguments specifying how to connect to existing databases and the names of indexes.\nSee API documentation for more info.</p>\n<h2>Preparing Documents</h2>\n<p>DocumentStores expect Documents in dictionary form, like that below.\nThey are loaded using the <code>DocumentStore.write_documents()</code> method.</p>\n<pre><code>document_store = ElasticsearchDocumentStore()\ndicts = [\n    {\n        'text': DOCUMENT_TEXT_HERE,\n        'meta': {'name': DOCUMENT_NAME, ...}\n    }, ...\n]\ndocument_store.write_documents(dicts)\n</code></pre>\n<h2>File Conversion</h2>\n<p>There are a range of different file converters in Haystack that can help get your data into the right format.\nHaystack features support for txt, pdf and docx formats and there is even a converted that leverages Apache Tika.\nSee the File Converters section in the API docs for more information.</p>\n<!-- _comment: !! Code snippets for each type !! -->\n<p>Haystack also has a <code>convert_files_to_dicts()</code> utility function that will convert\nall txt or pdf files in a given folder into this dictionary format.</p>\n<pre><code>document_store = ElasticsearchDocumentStore()\ndicts = convert_files_to_dicts(dir_path=doc_dir)\ndocument_store.write_documents(dicts)\n</code></pre>\n<h2>Writing Documents</h2>\n<p>Haystack allows for you to write store documents in an optimised fashion so that query times can be kept low.</p>\n<h3>For Sparse Retrievers</h3>\n<p>For <strong>sparse</strong>, keyword based retrievers such as BM25 and TF-IDF,\nyou simply have to call <code>DocumentStore.write_documents()</code>.\nThe creation of the inverted index which optimises querying speed is handled automatically.</p>\n<pre><code>document_store.write_documents(dicts)\n</code></pre>\n<h3>For Dense Retrievers</h3>\n<p>For <strong>dense</strong> neural network based retrievers like Dense Passage Retrieval, or Embedding Retrieval,\nindexing involves computing the Document embeddings which will be compared against the Query embedding.</p>\n<p>The storing of the text is handled by <code>DocumentStore.write_documents()</code> and the computation of the\nembeddings is started by <code>DocumentStore.update_embeddings()</code>.</p>\n<pre><code>document_store.write_documents(dicts)\ndocument_store.update_embeddings(retriever)\n</code></pre>\n<p>This step is computationally intensive since it will engage the transformer based encoders.\nHaving GPU acceleration will significantly speed this up.</p>\n<!-- _comment: !! Diagrams of inverted index / document embeds !! -->\n<!-- _comment: !! Make this a tab element to show how different datastores are initialized !! -->\n<h2>Choosing the right database</h2>\n<p>Document storage is important\nThere are many types and each has implications on memory consumption, indexing and querying</p>\n<p>Talk about trade offs\nElasticsearch vs SQL vs In Memory vs FAISS</p>\n<p>Show some code snippets of each using tab elements</p>\n<p>Use tabbed element to show how each is initialized</p>"}},"staticQueryHashes":[]}